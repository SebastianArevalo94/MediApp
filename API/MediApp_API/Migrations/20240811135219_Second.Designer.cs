// <auto-generated />
using System;
using MediApp_API.Modelos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediApp_API.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240811135219_Second")]
    partial class Second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediApp_API.Modelos.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("Specialty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MediApp_API.Modelos.MedicalReserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Id_Doctor")
                        .HasColumnType("int");

                    b.Property<int>("Id_Patient")
                        .HasColumnType("int");

                    b.Property<int>("Specialty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MedicalReserves");
                });

            modelBuilder.Entity("MediApp_API.Modelos.MedicalSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SpecialtyClinic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialties");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Phone_Number")
                        .HasColumnType("int");

                    b.Property<int>("Profile_Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Profile_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Profile_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profile_Types");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Clinic", b =>
                {
                    b.HasOne("MediApp_API.Modelos.Clinic", null)
                        .WithMany("Clinics")
                        .HasForeignKey("ClinicId");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Doctor", b =>
                {
                    b.HasOne("MediApp_API.Modelos.Doctor", null)
                        .WithMany("doctors")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Patient", b =>
                {
                    b.HasOne("MediApp_API.Modelos.Patient", null)
                        .WithMany("Patients")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Clinic", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Doctor", b =>
                {
                    b.Navigation("doctors");
                });

            modelBuilder.Entity("MediApp_API.Modelos.Patient", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
